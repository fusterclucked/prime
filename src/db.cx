#include <lmdb.h>

#include "lib.h"

@prime_db_open: bool (prime_db_t* this, unsigned int flags, prime_error_t* error)

	success: bool = false

	if errno = mdb_env_create (&this->env)
		error->site = "open database context"
		goto done

	if errno = mdb_env_open (this->env, ".prime", MDB_NOSUBDIR | flags, 0644)
		if errno is ENOENT
			success = true
		else
			error->site = "open database file"
		goto done

	if errno = mdb_txn_begin (this->env, NULL, flags, &this->txn)
		error->site = "open transaction"
		goto done

	if errno = mdb_dbi_open (this->txn, NULL, 0, &this->dbi)
		error->site = "open database handle"
		goto done

	success = true

done:
	return success

@prime_db_close: void (prime_db_t* this)

	mdb_env_close this->env

@prime_db_read: bool (MDB_cursor* cursor, struct MDB_val* current, prime_error_t* error)

	if errno = mdb_cursor_get (cursor, current, NULL, MDB_NEXT)
		if errno is MDB_NOTFOUND
			// HACK restricts key to be non-null
			// TODO once error handling relies on errno and not return values
			// then the return value can be used to indicate end of data
			// and allow null keys again
			current->mv_data = NULL
			errno = 0
		else
			error->site = "read current item"
			return false

	return true
