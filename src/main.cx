#include <getopt.h>

#include "ansi.h"
#include "lib.h"

#include "commit.h"
#include "console.h"
#include "ls.h"

#define streq(text1, text2)  (strcmp ((text1), (text2)) == 0)

#define H(text) TT (BOLD (text) ":")
#define Q(text) TT (CYAN ("'" text "'"))

#define HELP_BRIEF
	"Try " Q ("%s --help") " for all available commands and options"

structdef (options)
	help: bool
/**/

parse_options: void (options_t* options, int argc, char* argv[])

	enum { OPT_HELP = 256 }

	options->help = false
	opterr = 0 // suppress default getopt error messages

	for ;;
		switch getopt_long (argc, argv, "",
			(struct option []) {
				{ "help", no_argument, NULL, OPT_HELP },
				{  NULL,  0,           NULL, 0        }
			} /*
		*/, NULL)

		case -1:
			goto done

		case '?':
			switch optopt
			case '?':
				break
			default:
				catch EINVAL
				console_error "Unknown option " Q ("%s%s%s"),
					optopt ? "-" : "",
					optopt ? (char []){ optopt, '\0' } : "",
					optopt ? "" : argv[optind - 1]
			// fall through to OPT_HELP

		case OPT_HELP:
			options->help = true
			break

done:
	if options->help

		if errno
			console_info HELP_BRIEF, argv[0]

		else
			console_output H "Usage" \ " %s [command] [option...]", argv[0]
			console_output H "Commands"
			console_output   "  init       Create an empty repository"
			console_output H "Options"
			console_output   "  -? --help  Display usage and all available commands and options"

exec_commands: void (int argc, char* argv[])

	if optind >= argc
		return

	command: char* = argv[optind]

	if   streq "ls", command
		prime_ls /**/
	else streq "commit", command
		prime_commit /**/
	else
		catch EINVAL
		console_error ("Unknown command " Q "%s"), command
		console_info HELP_BRIEF, argv[0]
		return

	if errno
		console_error ("%s " TT BLUE "[%i]"), (strerror errno), errno

@main: int (int argc, char* argv[])

	options: options_t

	do
		try parse_options (&options), argc, argv
		unless options.help
			try exec_commands argc, argv

	finally

	return errno
