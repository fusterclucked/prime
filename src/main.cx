#include <getopt.h>

#include "ansi.h"
#include "lib.h"

#include "commit.h"
#include "console.h"
#include "ls.h"

#define streq(text1, text2)  (strcmp ((text1), (text2)) is 0)

#define Q(text) TT(CYAN "'" text "'")

#define HELP_BRIEF
	"Try " Q("%s --help") " for all available commands and options"

structdef (options)
	help: bool
/**/

parse_options: bool (options_t* options, int argc, char* argv[])

	success: bool = true

	enum { OPT_HELP = 256 }

	options->help = false
	opterr = 0 // suppress default getopt error messages

	for ;;
		switch getopt_long (argc, argv, "",
			(struct option []) {
				{ "help", no_argument, NULL, OPT_HELP },
				{  NULL,  0,           NULL, 0        }
			} /*
		*/, NULL)

		case -1:
			goto done

		case '?':
			switch optopt
			case '?':
				break
			default:
				success = false
				console_error "Unknown option " Q("%s%s%s"),
					optopt ? "-" : "",
					optopt ? (char []){ optopt, '\0' } : "",
					optopt ? "" : argv[optind - 1]
			// fall through to OPT_HELP

		case OPT_HELP:
			options->help = true
			break

done:
	if options->help

		if success
			console_output TT(BOLD "Usage:") " %s [command] [option...]",
				argv[0]
			console_output TT(BOLD "Commands:")
			console_output "  init       Create an empty repository"
			console_output TT(BOLD "Options:")
			console_output "  -? --help  Display usage and all available commands and options"

		else
			console_info HELP_BRIEF, argv[0]

	return success

parse_commands: bool (int argc, char* argv[])

	if optind >= argc
		return true

	success: bool = false
	command: char* = argv[optind]
	error: prime_error_t

	if streq ("ls", command)
		unless success = prime_ls (&error)
			console_error "Failed to %s " TT(BLUE "[%i]"),
				error.site, errno

	else streq ("commit", command)
		unless success = prime_commit (&error)
			console_error "Failed to %s " TT(BLUE "[%i]"),
				error.site, errno

	else
		console_error "Unknown command " TT(CYAN "'%s'"), command
		console_info HELP_BRIEF, argv[0]

	return success

@main: int (int argc, char* argv[])

	options: options_t

	return !(
		parse_options (&options, argc, argv) and
		(options.help or parse_commands (argc, argv)) )
